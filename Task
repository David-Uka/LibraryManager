Task 1: Working with Arrays of Books*  
Goal: Get better at using arrays, loops, and functions in JavaScript.  
Problem:  
Youâ€™re going to create a function called processBookData(books) that works with a list of books. Each book is an object with details like title, author, year, and genre. Your function should do the following:  
1. Take the list of books as input.  
2. Return an object with three things:  
   - A list of books that were published after the year 2000.  
   - A list of all the authorsâ€™ names, sorted in alphabetical order.  
   - A count of how many books there are in each genre (e.g., { "Sci-Fi": 3, "Mystery": 2 }).  

---

### What Youâ€™ll Learn  
- How to use array methods like filter, map, and reduce to work with data.  
- How to sort lists and remove duplicates.  
- How to handle errors, like what to do if the input is empty or not in the right format.  

---

### Steps to Get Started  
1. Understand the Input:  
   The input is an array of book objects. Each book looks something like this:  
   js
   {
     title: "The Great Gatsby",
     author: "F. Scott Fitzgerald",
     year: 1925,
     genre: "Classic"
   }
   

2. Filter Books Published After 2000:  
   Use the filter method to create a new array of books where the year is greater than 2000.  

3. Sort Authors Alphabetically:  
   Extract all the authorsâ€™ names, remove duplicates (if any), and sort them in alphabetical order.  

4. Count Books by Genre:  
   Use a loop or the reduce method to count how many books belong to each genre.  

5. Handle Edge Cases:  
   Think about what happens if the input is empty or not in the correct format. How will your function handle that?  

---

### Things to Think About  
- Duplicate Authors: What if the same author wrote multiple books? How will you make sure their name only appears once in the sorted list?  
- Grouping by Genre: How can you efficiently count the number of books in each genre?  
- Error Handling: What should your function do if the input is empty or not an array?  

---

### Example Input and Output  
Input:  
js
const books = [
  { title: "Book A", author: "Author X", year: 1999, genre: "Sci-Fi" },
  { title: "Book B", author: "Author Y", year: 2005, genre: "Mystery" },
  { title: "Book C", author: "Author X", year: 2010, genre: "Sci-Fi" },
  { title: "Book D", author: "Author Z", year: 2015, genre: "Mystery" }
];


Output:  
js
{
  booksAfter2000: [
    { title: "Book B", author: "Author Y", year: 2005, genre: "Mystery" },
    { title: "Book C", author: "Author X", year: 2010, genre: "Sci-Fi" },
    { title: "Book D", author: "Author Z", year: 2015, genre: "Mystery" }
  ],
  sortedAuthors: ["Author X", "Author Y", "Author Z"],
  genreCount: { "Sci-Fi": 2, "Mystery": 2 }
}


---

### Tips for Success  
- Break the problem into smaller parts. For example, first focus on filtering the books, then move on to sorting the authors, and finally count the genres.  
- Use console.log() to check your work at each step.  
- If you get stuck, look up JavaScript array methods like filter, map, and reduce to see how they work.  

---

### Bonus Challenge  
- Add a feature to your function that calculates the average year of publication for all the books.  
- Modify the function to handle case-insensitive sorting of authorsâ€™ names (e.g., "author x" and "Author X" should be treated as the same).  

This task will help you practice working with arrays, objects, and functions while solving a real-world problem. Take your time, and donâ€™t be afraid to experiment!
*Task 3: Navigating Nested Categories in Your Library*  
*Goal:* Learn to work with folders-within-folders structures using your Library class.  
*Problem:*  
Your library now needs to organize books into *nested categories*, like:  
- A "Sci-Fi" category might have subcategories like "Dystopian" or "Space Opera".  
- Each category can hold books and more subcategories.  

Add a method getAllBookPaths() to your Library class that:  
1. *Recursively explores* these nested categories.  
2. Returns an array of all book paths in the format "Category/Subcategory/.../Book Title".  

---

### *Example Structure*  
js  
// Inside your Library class:  
{  
  name: "Fiction",  
  books: [{ title: "The Hobbit" }],  
  subcategories: [  
    {  
      name: "Sci-Fi",  
      books: [{ title: "Dune" }],  
      subcategories: [  
        {  
          name: "Dystopian",  
          books: [{ title: "1984" }],  
          subcategories: []  
        }  
      ]  
    }  
  ]  
}  

// getAllBookPaths() should return:  
// ["Fiction/The Hobbit", "Fiction/Sci-Fi/Dune", "Fiction/Sci-Fi/Dystopian/1984"]  
  

---

### *Questions to Guide You*  
1. *Breaking Down the Problem:*  
   - How do you start at the top-level category (e.g., "Fiction") and move "deeper" into subcategories step by step?  
   - Whatâ€™s the *repeating pattern* you can use for each category (check books â†’ check subcategories â†’ repeat)?  

2. *Building Paths:*  
   - If youâ€™re in the "Sci-Fi/Dystopian" category, how do you keep track of the full path ("Fiction/Sci-Fi/Dystopian") as you go deeper?  

3. *Connecting to Task 2:*  
   - How will you adjust your existing Library class to store this nested structure instead of a flat list?  
   - Does addBook() need to change to let users specify a category path (e.g., "Fiction/Sci-Fi")?  

4. *Edge Cases:*  
   - What if a category has *both books and subcategories*?  
   - How do you avoid getting stuck in an infinite loop if a subcategory accidentally references itself?  

---

### *Hints*  
- Think of nested categories like *folders on your computer*:  
  - Open a folder â†’ see files (books) and more folders (subcategories).  
  - For every new folder you open, repeat the same steps.  
- Use *string concatenation* to build paths (e.g., currentPath + "/" + categoryName).  
- Start small! Test with a single category first, then add nesting.  

---

This builds on your Library class by introducing *hierarchical organization* and forces you to solve problems like "how do I repeat an action for every layer of nesting?"â€”a key skill for working with real-worldÂ data!Â 

### Task 4: Build Your Own Tools to Process Book Data*  
*Goal:* Create your own versions of map, filter, and reduce to work with your library system from *Task 2*.  

*Problem:*  
1. **Recreate map, filter, and reduce** as standalone functions (e.g., myMap(array, callback)).  
2. *Use these tools* to analyze your libraryâ€™s book data (e.g., find all authors, count genres).  

---

### *What Youâ€™ll Learn*  
- How to create functions that accept other functions as inputs (callbacks).  
- How tools like map and filter work behind the scenes.  

---

### *How This Connects to Earlier Tasks*  
In *Task 1/2*, you used built-in methods like filter to process book data. Now, youâ€™ll *rebuild those tools yourself* and use them in your Library class!  

---

### *Steps to Get Started*  
1. **Write myFilter:**  
   Create a function that takes an array and a test function, then returns a new array with items that pass the test.  
   - Example: Use myFilter to find all books published after 2000.  

2. **Write myMap:**  
   Create a function that takes an array and a transformation function, then returns a new array where each item is transformed.  
   - Example: Use myMap to extract all book titles.  

3. **Write myReduce:**  
   Create a function that takes an array, a combining function, and an initial value, then returns a single value by combining all items.  
   - Example: Use myReduce to count books per genre (like in Task 1).  

4. *Test with Your Library Data:*  
   Use your tools to replace the logic in your Library class (e.g., replace processBookData with myFilter and myReduce).  

---

### *Guiding Questions*  
1. *Reusing Code:*  
   - How can you use myFilter in your Library class to find books published after 2000?  
   - Can myReduce replace the genre-counting logic from Task 1?  

2. *Edge Cases:*  
   - What happens if your library is empty? How will your tools handle that?  
   - What if the callback function (e.g., (book) => book.year > 2000) is missing or broken?  

3. *Performance:*  
   - If your library has 10,000 books, will your tools still work efficiently?  

---

### *Example Workflow*  
javascript  
// Sample book data from your Library class  
const books = [  
  { title: "Book A", year: 1999, genre: "Sci-Fi" },  
  { title: "Book B", year: 2005, genre: "Mystery" }  
];  

// Use your tools to:  
// 1. Filter books after 2000  
const booksAfter2000 = myFilter(books, (book) => book.year > 2000);  

// 2. Extract titles  
const titles = myMap(booksAfter2000, (book) => book.title);  

// 3. Count genres  
const genreCounts = myReduce(  
  books,  
  (counts, book) => {  
    counts[book.genre] = (counts[book.genre] || 0) + 1;  
    return counts;  
  },  
  {}  
);  
  

---

### *Hints*  
- Start with myFilterâ€”itâ€™s the simplest. Use a for loop to check each item.  
- Test your tools with small arrays first (e.g., [1, 2, 3]) before using them with book data.  
- *Remember:* Your tools should *not* modify the original array (just like real map/filter).  

---

### *Why This Matters*  
By rebuilding these tools, youâ€™ll see how JavaScriptâ€™s built-in methods work and gain more control over your data processing. This will help you debug and improve your Library class from earlier tasks!Â ðŸ’¡Â Â 

